---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/Header.astro';
import MermaidInit from '../components/MermaidInit.astro';
import CopyButtonInit from '../components/CopyButtonInit.astro';
import ShareButton from '../components/ShareButton.astro';
import { generateGradient } from '../utils/gradient';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage, draft } = Astro.props;
const displayTitle = import.meta.env.DEV && draft 
    ? `[Draft] ${title}`
    : title;
const gradient = heroImage ? null : (title ? generateGradient(title) : null);
const isAboutPage = Astro.url.pathname === '/about/' || Astro.url.pathname === '/about' || Astro.url.pathname === '/colophon/';
---

<html lang="en">
	<head>
		<BaseHead title={displayTitle} description={description} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
				max-width: 1020px;
				margin: 0 auto;
				overflow: hidden;
				position: relative;
			}
			.hero-image img,
			.hero-image .gradient {
				display: block;
				border-radius: 0;
				border: 2px solid #000;
			}
			.hero-image img {
				width: 100%;
				height: auto;
				max-height: 600px;
			}
			.hero-image .gradient {
				width: 100%;
				height: 510px;
				background-size: cover;
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: var(--color-gray-800);
			}
			.prose .iframe-wrapper {
				position: relative;
				width: 100%;
				margin: 1.5em 0;
				border: 2px solid #000;
				overflow: hidden;
				background: #f5f5f5;
			}

			.prose .iframe-wrapper::before {
				content: '';
				display: block;
				padding-bottom: 56.25%; /* 16:9 aspect ratio */
			}

			.prose .responsive-iframe {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				border: none;
				display: block;
			}

			.prose .iframe-fullscreen-button {
				position: absolute;
				top: 8px;
				right: 8px;
				background: rgba(255, 255, 255, 0.9);
				border: 2px solid #000;
				padding: 8px;
				cursor: pointer;
				display: flex;
				align-items: center;
				justify-content: center;
				z-index: 10;
				transition: background 0.2s;
				font-size: 0;
			}

			.prose .iframe-fullscreen-button:hover {
				background: rgba(255, 255, 255, 1);
			}

			.prose .iframe-fullscreen-button svg {
				display: block;
				width: 24px;
				height: 24px;
			}

			.prose .iframe-overlay {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: rgba(0, 0, 0, 0.8);
				display: flex;
				align-items: center;
				justify-content: center;
				z-index: 20;
			}

			.prose .iframe-overlay-content {
				background: white;
				padding: 2em;
				max-width: 400px;
				text-align: center;
				border: 2px solid #000;
			}

			.prose .iframe-overlay-text {
				margin: 0 0 1.5em 0;
				color: #333;
			}

			.prose .iframe-overlay-actions {
				display: flex;
				gap: 1em;
				justify-content: center;
			}

			.prose .iframe-open-button,
			.prose .iframe-load-button {
				padding: 0.75em 1.5em;
				border: 2px solid #000;
				background: white;
				cursor: pointer;
				font-size: 1em;
				transition: background 0.2s;
			}

			.prose .iframe-open-button:hover,
			.prose .iframe-load-button:hover {
				background: #f0f0f0;
			}

			.prose .iframe-open-button {
				background: #000;
				color: white;
			}

			.prose .iframe-open-button:hover {
				background: #333;
			}

			/* Fullscreen modal */
			.prose .iframe-fullscreen-modal {
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: rgba(0, 0, 0, 0.95);
				z-index: 1000;
				display: none;
				flex-direction: column;
				align-items: center;
				justify-content: center;
			}

			.prose .iframe-fullscreen-modal.active {
				display: flex;
			}

			.prose .iframe-fullscreen-content {
				width: 100%;
				height: 100%;
				position: relative;
				display: flex;
				flex-direction: column;
			}

			.prose .iframe-fullscreen-header {
				padding: 1em;
				background: rgba(0, 0, 0, 0.8);
				color: white;
				display: flex;
				justify-content: space-between;
				align-items: center;
				border-bottom: 2px solid #fff;
			}

			.prose .iframe-fullscreen-title {
				margin: 0;
				font-size: 1.2em;
			}

			.prose .iframe-fullscreen-close {
				background: transparent;
				border: 2px solid white;
				color: white;
				padding: 0.5em 1em;
				cursor: pointer;
				font-size: 1em;
			}

			.prose .iframe-fullscreen-close:hover {
				background: rgba(255, 255, 255, 0.2);
			}

			.prose .iframe-fullscreen-iframe {
				flex: 1;
				width: 100%;
				border: none;
			}

			/* Responsive adjustments */
			@media (max-width: 768px) {
				.prose .iframe-wrapper::before {
					padding-bottom: 75%; /* Taller aspect ratio for mobile */
				}

				.prose .iframe-overlay-content {
					padding: 1.5em;
					max-width: 90%;
				}

				.prose .iframe-overlay-actions {
					flex-direction: column;
				}

				.prose .iframe-open-button,
				.prose .iframe-load-button {
					width: 100%;
				}
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: var(--color-gray-600);
			}
			.last-updated-on {
				font-style: italic;
			}
			.share-container {
				display: flex;
				justify-content: center;
				margin-top: 1em;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="hero-image">
					{heroImage ? (
						<img src={heroImage} alt="" />
					) : gradient && (
						<div class="gradient" style={{ background: gradient.background }}></div>
					)}
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{displayTitle}</h1>
						{!isAboutPage && (
							<div class="share-container">
								<ShareButton title={displayTitle} />
							</div>
						)}
						<hr />
					</div>
					<slot />
				</div>
			</article>
		</main>
		<Footer />
		<MermaidInit />
		<CopyButtonInit />
		<script>
			// Handle iframe enhancements: fullscreen and mobile detection
			(function() {
				'use strict';

				function initIframes() {
					// First, wrap any unwrapped iframes that exist in the DOM
					document.querySelectorAll('iframe:not(.responsive-iframe)').forEach((iframe) => {
						// Skip if already wrapped
						if (iframe.closest('.iframe-wrapper')) return;
						
						const src = iframe.src || iframe.getAttribute('src') || '';
						if (!src) return;
						
						// Check if mobile-incompatible
						const mobileIncompatiblePatterns = [
							/arcgis\.com/i,
							/maps\.arcgis\.com/i,
							/mapviewer/i,
							/desktop/i,
						];
						const isMobileIncompatible = mobileIncompatiblePatterns.some(pattern =>
							pattern.test(src)
						);
						
						const title = iframe.title || iframe.getAttribute('title') || src;
						
						// Create wrapper
						const wrapper = document.createElement('div');
						wrapper.className = 'iframe-wrapper';
						wrapper.setAttribute('data-iframe-src', src);
						wrapper.setAttribute('data-mobile-incompatible', isMobileIncompatible ? 'true' : 'false');
						wrapper.setAttribute('data-iframe-title', title);
						
						// Wrap the iframe
						iframe.parentNode?.insertBefore(wrapper, iframe);
						wrapper.appendChild(iframe);
						
						// Add responsive class
						iframe.classList.add('responsive-iframe');
						
						// Handle mobile-incompatible iframes
						if (isMobileIncompatible) {
							const iframeId = iframe.id || `iframe-${Math.random().toString(36).substring(7)}`;
							iframe.id = iframeId;
							iframe.src = '';
							iframe.setAttribute('data-src', src);
							iframe.style.display = 'none';
							
							const overlay = document.createElement('div');
							overlay.className = 'iframe-overlay';
							overlay.innerHTML = `
								<div class="iframe-overlay-content">
									<p class="iframe-overlay-text">
										This content is best viewed on a desktop. Would you like to open it in a new tab?
									</p>
									<div class="iframe-overlay-actions">
										<button class="iframe-open-button" aria-label="Open in new tab">
											Open in New Tab
										</button>
										<button class="iframe-load-button" aria-label="Load anyway" data-iframe-id="${iframeId}">
											Load Anyway
										</button>
									</div>
								</div>
							`;
							
							const openButton = overlay.querySelector('.iframe-open-button');
							if (openButton) {
								openButton.addEventListener('click', () => {
									window.open(src, '_blank');
								});
							}
							
							const loadButton = overlay.querySelector('.iframe-load-button');
							if (loadButton) {
								loadButton.addEventListener('click', () => {
									iframe.src = src;
									iframe.style.display = 'block';
									overlay.style.display = 'none';
								});
							}
							
							wrapper.appendChild(overlay);
						}
					});
					
					// Find all iframe wrappers (now including newly wrapped ones)
					const wrappers = document.querySelectorAll('.iframe-wrapper');
					
					wrappers.forEach((wrapper) => {
						const isMobileIncompatible = wrapper.getAttribute('data-mobile-incompatible') === 'true';
						const iframeSrc = wrapper.getAttribute('data-iframe-src');
						const iframeTitle = wrapper.getAttribute('data-iframe-title') || iframeSrc || '';
						
						// Add fullscreen button
						const fullscreenButton = document.createElement('button');
						fullscreenButton.className = 'iframe-fullscreen-button';
						fullscreenButton.setAttribute('aria-label', 'Expand to fullscreen');
						fullscreenButton.innerHTML = `
							<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
								<path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"/>
							</svg>
						`;
						
						// Handle fullscreen button click
						fullscreenButton.addEventListener('click', (e) => {
							e.stopPropagation();
							openFullscreen(iframeSrc || '', iframeTitle, wrapper);
						});
						
						wrapper.appendChild(fullscreenButton);
						
						// Handle mobile-incompatible iframes
						if (isMobileIncompatible) {
							const overlay = document.createElement('div');
							overlay.className = 'iframe-overlay';
							overlay.innerHTML = `
								<div class="iframe-overlay-content">
									<p class="iframe-overlay-text">
										This content is best viewed on a desktop. Would you like to open it in a new tab?
									</p>
									<div class="iframe-overlay-actions">
										<button class="iframe-open-button" aria-label="Open in new tab">
											Open in New Tab
										</button>
										<button class="iframe-load-button" aria-label="Load anyway">
											Load Anyway
										</button>
									</div>
								</div>
							`;
							
							// Handle open in new tab
							const openButton = overlay.querySelector('.iframe-open-button');
							if (openButton) {
								openButton.addEventListener('click', () => {
									window.open(iframeSrc || '', '_blank');
								});
							}
							
							// Handle load anyway
							const loadButton = overlay.querySelector('.iframe-load-button');
							if (loadButton) {
								loadButton.addEventListener('click', () => {
									const iframe = wrapper.querySelector('.responsive-iframe');
									if (iframe && iframe.dataset.src) {
										iframe.src = iframe.dataset.src;
										iframe.style.display = 'block';
										overlay.style.display = 'none';
									}
								});
							}
							
							wrapper.appendChild(overlay);
						}
					});
				}
				
				function openFullscreen(src, title, originalWrapper) {
					// Find the iframe element
					const originalIframe = originalWrapper.querySelector('.responsive-iframe');
					let iframeSrc = src;
					
					if (!iframeSrc && originalIframe) {
						iframeSrc = originalIframe.src || originalIframe.dataset.src || '';
					}
					
					// Create fullscreen modal
					const modal = document.createElement('div');
					modal.className = 'iframe-fullscreen-modal';
					modal.innerHTML = `
						<div class="iframe-fullscreen-content">
							<div class="iframe-fullscreen-header">
								<h2 class="iframe-fullscreen-title">${escapeHtml(title)}</h2>
								<button class="iframe-fullscreen-close" aria-label="Close fullscreen">Close</button>
							</div>
							<iframe class="iframe-fullscreen-iframe" src="${escapeHtml(iframeSrc)}" title="${escapeHtml(title)}" allowfullscreen></iframe>
						</div>
					`;
					
					// Handle close button
					const closeButton = modal.querySelector('.iframe-fullscreen-close');
					if (closeButton) {
						closeButton.addEventListener('click', () => {
							closeFullscreen(modal);
						});
					}
					
					// Close on Escape key
					const handleEscape = (event) => {
						if (event.key === 'Escape') {
							closeFullscreen(modal);
							document.removeEventListener('keydown', handleEscape);
						}
					};
					document.addEventListener('keydown', handleEscape);
					
					// Close on background click
					modal.addEventListener('click', (event) => {
						if (event.target === modal) {
							closeFullscreen(modal);
						}
					});
					
					document.body.appendChild(modal);
					// Trigger reflow
					void modal.offsetWidth;
					modal.classList.add('active');
				}
				
				function closeFullscreen(modal) {
					modal.classList.remove('active');
					setTimeout(() => modal.remove(), 300);
				}
				
				function escapeHtml(text) {
					const div = document.createElement('div');
					div.textContent = text;
					return div.innerHTML;
				}
				
				// Initialize on DOM ready
				if (document.readyState === 'loading') {
					document.addEventListener('DOMContentLoaded', initIframes);
				} else {
					initIframes();
				}
			})();
		</script>
	</body>
</html>
